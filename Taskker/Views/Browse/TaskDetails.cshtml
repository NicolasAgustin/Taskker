@using Taskker.Models
@using Taskker.Models.DAL
@model Tarea

<style>
    [contenteditable] {
        outline: 0px solid transparent;
    }

    #modal-title :hover {
        background-color: rgba(0, 0, 0, 0.45);
    }

    .modal {
        width: 85% !important;
        height: 85% !important;
    }
</style>

<script>
    $(document).ready(function () {
        var encontrados = $("a[name=borrar-tiempo]").toArray()
        encontrados.forEach(e => e.addEventListener('click', function (elem) {
            var target = elem.target
            var index = target.getAttribute('data-index')
            $.ajax({
                url: "/Browse/DeleteTimeTracked",
                type: 'GET',
                data: { id: index },
                success: function () {
                    target.parentElement.remove()
                }
            })
        }))
    })
</script>

<!-- Modal Structure -->
<div class="modal-content red lighten-4"
     id="details-task"
     data-id="@Model.ID">
    <div class="container">
        <div class="row">
            <nav>
                <div class="nav-wrapper offset-s4">
                    <a href="#" class="brand-logo" id="modal-title" contenteditable="true">@Model.Titulo</a>
                    <ul id="nav-mobile" class="right hide-on-med-and-down">
                        @*<li><a href="#">Sass</a></li>*@
                    </ul>
                </div>
            </nav>
        </div>
        <div class="row">
            @* Probar con una lista donde cada elemento li tenga un atributo name como:
                lista[0].tiempo
                lista2[0].nombre
                lista[1].tiempo ...
                lista[n].tiempo ...
             de esta forma usamos el model binding
                *@
            @using (Html.BeginForm("UpdateTask", "Browse", FormMethod.Post, new { @class = "col s12", @id = "update-form" }))
            {
                <input type="hidden" name="id" value="@Model.ID" />
                <input type="hidden" id="task-title" name="titulo" value="@Model.Titulo" />

                <div class="row">
                    <div class="col s6">
                        <div class="input-field">
                            <textarea id="textarea1"
                                      class="materialize-textarea"
                                      placeholder="Descripcion"
                                      style="color:black"
                                      name="descripcion">@Model.Descripcion</textarea>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col s3" style="padding-top: 15px">
                        <select name="tipo">
                            @{
                                if (Model.Tipo == TareaTipo.SinTipo)
                                {
                                    <option value="@TareaTipo.SinTipo" disabled selected>Seleccionar tipo</option>
                                    <option value="@TareaTipo.Desarrollo">Desarrollo</option>
                                    <option value="@TareaTipo.Tarea">Tarea</option>
                                }
                                else if (Model.Tipo == TareaTipo.Desarrollo)
                                {
                                    <option value="@TareaTipo.SinTipo" disabled>Seleccionar tipo</option>
                                    <option value="@TareaTipo.Desarrollo" selected>Desarrollo</option>
                                    <option value="@TareaTipo.Tarea">Tarea</option>
                                }
                                else if (Model.Tipo == TareaTipo.Tarea)
                                {
                                    <option value="@TareaTipo.SinTipo" disabled>Seleccionar tipo</option>
                                    <option value="@TareaTipo.Desarrollo">Desarrollo</option>
                                    <option value="@TareaTipo.Tarea" selected>Tarea</option>
                                }
                            }
                        </select>
                        <label>Tipo de tarea</label>
                    </div>
                </div>
                @*Asignees*@
                <div class="row">
                    <div class="col s9">
                        <input type="hidden" id="chips-values" name="asignees" />
                        <div id="asignees-chips" class="chips-autocomplete" style="color: black"></div>
                    </div>
                </div>
                <div class="row">
                    <div class="col s6">
                        <div class="input-field dropdown-trigger" data-target="dropdown-hours" id="input-hours">
                            <input id="hours"
                                   type="text"
                                   placeholder="Tiempo estimado"
                                   class="validate"
                                   name="estimado"
                                   value="@ViewBag.Time">
                        </div>

                    </div>

                    <ul id="dropdown-hours" class="dropdown-content">
                    </ul>
                </div>
                                // Input para trackeo de horas
                                // cada vez que actualicemos la tarea hay que sumar las horas 
                <div class="row">
                    <div class="col s6">
                        <div class="input-field dropdown-trigger" data-target="dropdown-hours2" id="input-hours2">
                            <input id="hours2" placeholder="Registrar horas" type="text" class="validate" name="TiempoRegistrado">
                        </div>
                    </div>

                    <div class="col s6">
                        <ul id="dropdown-hours2" class="dropdown-content">
                        </ul>
                    </div>
                </div>
                <div class="row">
                    <ul class="collection">
                        @{var tiempos = (List<(DateTime, int, int, int)>)ViewData["Times"];}
                        @for (int i = 0; i < tiempos.Count; i++)
                        {
                            <li class="collection-item" style="display: inline" tabindex="@i">
                                <p>@tiempos[i].Item1.ToString()</p>
                                <a class="btn" name="borrar-tiempo" data-index="@tiempos[i].Item4">borrar</a>
                                <input type="hidden" name="Tiempos[@i].Tiempo" value="@tiempos[i].Item1.ToString()"/>
                                <input type="hidden" name="Tiempos[@i].UsuarioID" value="@tiempos[i].Item2"/>
                                <input type="hidden" name="Tiempos[@i].TareaID" value="@tiempos[i].Item3"/>
                            </li>
                        }
                    </ul>
                </div>
            }
        </div>
    </div>
    
</div>
<div class="modal-footer">
    <a href="#!" class="modal-close waves-effect waves-green btn-flat">Close</a>
</div>

<script>

    var taskid = null

    $(document).ready(function () {

        var elems = document.querySelectorAll('select');
        M.FormSelect.init(
            elems,
            {
                coverTrigger: false
            }
        );

        M.Dropdown.init(
            document.querySelectorAll('#input-hours2'),
            {
                coverTrigger: false,
                autoTrigger: false,
                onCloseEnd: function () {
                    // Una vez que se seleccione la opcion del dropdown
                    // Se cierra, por lo que obtenemos la primer opcion que aparezca
                    var textinput = document.getElementById('hours2')
                    var elemText = this.dropdownEl.firstChild.innerText

                    if (elemText != undefined)
                        textinput.value = this.dropdownEl.firstChild.innerText
                }
            }
        )

        document.getElementById('hours2').addEventListener('input', function (elem) {

            var estimated = {}
            // Obtenemos el valor del input
            var time = elem.srcElement.value
            var matches = time.match(/\d+\s*[a-zA-Z]+/gu)
            var hour = ''
            var minute = ''
            var second = ''

            if (matches == null) {
                return;
            }

            matches.forEach(function (value) {
                var number = value.replace(/[a-zA-Z\s]+/, '')
                var unit = value.replace(/[\d\s]+/, '')

                if ('horas'.includes(unit.toLowerCase())) {
                    estimated['H'] = (estimated['H'] ?? 0) + Number(number)
                } else if ('minutos'.includes(unit.toLowerCase())) {
                    estimated['M'] = (estimated['M'] ?? 0) + Number(number)
                } else if ('segundos'.includes(unit.toLowerCase())) {
                    estimated['S'] = (estimated['S'] ?? 0) + Number(number)
                }

            })

            Object.keys(estimated).reduce(function (acum, key) {
                var value = estimated[key]
                switch (key) {
                    case 'H':
                        hour = `${value} ${value == 1 ? "Hora" : "Horas"}`
                        break
                    case 'M':
                        minute = `${value} ${value == 1 ? "Minuto" : "Minutos"}`
                        break
                    case 'S':
                        second = `${value} ${value == 1 ? "Segundo" : "Segundos"}`
                }

                return acum
            }, {})

            time = `${hour} ${minute} ${second}`

            // Obtenemos la instancia del dropdown
            var instance = M.Dropdown.getInstance($('#input-hours2'));

            // Creamos un elemento para el dropdown
            var complete = document.createElement('li')
            complete.innerText = time

            // Eliminamos todos los elementos hijos que pueda tener el dropdown
            while (instance.dropdownEl.firstChild) {
                instance.dropdownEl.removeChild(instance.dropdownEl.lastChild);
            }

            // Appendeamos el nuevo elemento creado
            instance.dropdownEl.appendChild(complete)

            // Abrimos el dropdown
            instance.open()
        });

        // Funcion para actualizar el input oculto cada vez que se modifique el h4
        // que posee el contenteditable
        document.getElementById('modal-title').addEventListener('input', function (elem) {
            document.getElementById('task-title').value = elem.target.innerText
        })

        M.textareaAutoResize($('#textarea1'));

        taskid = $('#details-task')[0].getAttribute('data-id')

        var usuarios = {}
        var chipsUsers = []

        var asignees = {}
        var chipsAsignees = []

        $.ajax({
            type: 'GET',
            url: "/Browse/GetUsers",
            success: function (data) {
                for (const [key, value] of Object.entries(data)) {
                    usuarios[key] = value;
                    chipsUsers.push({
                        tag: key,
                        image: value
                    })
                }
            }
        });

        $.ajax({
            type: 'GET',
            url: `/Browse/GetUsersInTask/${taskid}`,
            success: function (data) {

                var usersString = []

                for (const [key, value] of Object.entries(data)) {
                    asignees[key] = value;
                    usersString.push(key)
                    chipsAsignees.push({
                        tag: key,
                        image: value
                    })
                }

                document.getElementById('chips-values')
                    .setAttribute(
                        'value',
                        usersString.join(',')
                    )

                var elems = document.querySelectorAll('.chips-autocomplete');
                var chipInstance = M.Chips.init(
                    elems,
                    {
                        data: chipsAsignees,
                        onChipAdd: function (chip) {
                            var instance = M.Chips.getInstance(
                                $('#asignees-chips')
                            )

                            var selected = []

                            selected = instance.chipsData.map(
                                function (value, index) {
                                    return value['tag']
                                }
                            )

                            document.getElementById("chips-values")
                                .setAttribute(
                                    'value',
                                    selected.join(',')
                                )
                        },
                        onChipDelete: function () {
                            var instance = M.Chips.getInstance(
                                $('#asignees-chips')
                            )
                            var data = instance.chipsData
                            selected = data.map(
                                function (value, index) {
                                    return value['tag']
                                }
                            )
                            document.getElementById("chips-values")
                                .setAttribute(
                                    'value',
                                    selected.join(',')
                                )
                        },
                        autocompleteOptions: {
                            data: usuarios
                        },
                        placeholder: 'Asignar'
                    }
                );
            }
        })
    })
</script>